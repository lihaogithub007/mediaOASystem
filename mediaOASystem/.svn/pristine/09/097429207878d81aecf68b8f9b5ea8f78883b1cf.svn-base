package com.yuyu.soft.admin.controller;

import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.yuyu.soft.base.annotation.SecurityMapping;
import com.yuyu.soft.base.controller.BaseController;
import com.yuyu.soft.base.mv.JModelAndView;
import com.yuyu.soft.entity.DepartmentAwards;
import com.yuyu.soft.entity.SmsRemindLogs;
import com.yuyu.soft.entity.User;
import com.yuyu.soft.service.IDepartmentAwardsService;
import com.yuyu.soft.service.IDepartmentService;
import com.yuyu.soft.service.ISmsRemindLogsService;
import com.yuyu.soft.service.IUserService;
import com.yuyu.soft.util.CommUtil;
import com.yuyu.soft.util.Constants;
import com.yuyu.soft.util.JsonUtil;
import com.yuyu.soft.util.POIUtil;
import com.yuyu.soft.util.PageUtil;
import com.yuyu.soft.util.PagerInfo;
import com.yuyu.soft.util.ResultMsg;
import com.yuyu.soft.util.WebForm;

/**
 * 短信提醒日志管理                      
 * @Filename: SmsRemindLogsController.java
 * @Version: 1.0
 * @Author: lihao
 *
 */
@Controller
public class SmsRemindLogsController {

    protected static final Log       log = LogFactory.getLog(SmsRemindLogsController.class);
    @Resource
    private IUserService             userService;
    @Resource
    private ISmsRemindLogsService    smsRemindLogsService;

    /**
     * 短信提醒记录列表
     */
    @RequestMapping({ "/admin/sms/sms_remind_logs_list.htm" })
    public ModelAndView sms_remind_logs_list(HttpServletRequest request,
                                               HttpServletResponse response, String pageSize,
                                               String currentPage,String true_name,
                                               String log_name,String createtime) {
        ModelAndView mv = new JModelAndView("admin/sms/sms_remind_logs_list.html", request,
            response);

        currentPage = PageUtil.initCurrentPage(currentPage);
        PagerInfo pager = PageUtil.initPagerInfo(pageSize, currentPage);
        Map<String, Object> paramsMap = new HashMap<String, Object>();

        StringBuilder hql = new StringBuilder();
        hql.append("from SmsRemindLogs t where t.disabled=false");
        if (CommUtil.isNotNull(true_name)) {
            hql.append(" and t.user.true_name like :true_name");
            paramsMap.put("true_name", "%" + true_name.trim() + "%");
        }
        if (CommUtil.isNotNull(log_name)) {
        	hql.append(" and t.log_name like :log_name");
        	paramsMap.put("log_name", "%" + log_name.trim() + "%");
        }
        if (CommUtil.isNotNull(createtime)) {
            hql.append(" and date_format(t.createtime,'%Y-%m-%d') = str_to_date('")
                .append(createtime).append("','%Y-%m-%d')");
        }
        hql.append(" order by t.createtime desc");
        List<SmsRemindLogs> list = smsRemindLogsService.querySmsRemindLogsList(hql.toString(), paramsMap, pager);
        PageUtil.savePageInfo2ModelAndView(mv, list, pager);

        // 提醒内容处理
        if (list!= null && list.size() > 0) {
			for (SmsRemindLogs smsRemindLogs : list) {
				int log_info_length = smsRemindLogs.getLog_info().length();
				String log_info = smsRemindLogs.getLog_info();
				if (log_info_length > 25) {
					smsRemindLogs.setLog_info(log_info.substring(0, 25) + "...");
				}
			}
        }
        
        
        mv.addObject("obj", list);
        mv.addObject("true_name", true_name);
        mv.addObject("log_name",log_name);
        mv.addObject("createtime",createtime);
        
        return mv;
    }
    
    
    
    @RequestMapping({ "/admin/sms/sms_remind_logs_view.htm" })
    public ModelAndView department_awards_view(HttpServletRequest request,
                                               HttpServletResponse response, String currentPage,
                                               Long id) {

        String target_url = CommUtil.getURL(request)
                            + "/admin/sms/sms_remind_logs_list.htm?currentPage=" + currentPage;
        if (id == null) {
            return CommUtil.errorPage(target_url, "提醒记录标识为空", request, response);
        }
        SmsRemindLogs smsRemindLogs = smsRemindLogsService.getSmsRemindLogs(id);
        if (smsRemindLogs == null) {
            return CommUtil.errorPage(target_url, "找不到提醒记录", request, response);
        }
        ModelAndView mv = new JModelAndView("admin/sms/sms_remind_logs_view.html", request,
            response);

        mv.addObject("obj", smsRemindLogs);
        mv.addObject("currentPage", currentPage);
        return mv;
    }
    
    
    
  //=============================================导出Excel区域开始======================================================//
    //@SecurityMapping(res_name = "导出Excel", res_url = "/admin/sms/sms_remind_logs_exportExcel.htm*", res_group = "")
    @RequestMapping("/admin/sms/sms_remind_logs_exportExcel.htm")
    public synchronized void sms_remind_logs_exportExcel(HttpServletRequest request,
                                                          HttpServletResponse response,
                                                          String currentPage,String true_name,
                                                          String log_name,String createtime) {

        List<Object[]> list = null;
        OutputStream out = null;
        SXSSFWorkbook workbook = null;
        SXSSFSheet sheet = null;

        try {
            workbook = new SXSSFWorkbook(100);
            sheet = (SXSSFSheet) workbook.createSheet("短信提醒记录");

            String titleName = "短信提醒记录";
            String[] titleNames = { "序号", "被提醒人", "提醒名称", "记录信息", "提醒时间","发送结果"};
            POIUtil.setColumnWidth(sheet, titleNames.length);//设置通用列宽
            sheet.setColumnWidth(4, 20 * 512);//设置标题列宽

            int all_count = smsRemindLogsService.getCountForExportExcel(
            		true_name, log_name, createtime);

            if (all_count == 0) {
                fillSheet(sheet, titleName, titleNames, null, 2);
            } else {
                //计算分页数
                log.info("总大小：" + all_count);
                int pageSize = Constants.DEFAULT_PAGE_SIZE_FOR_EXPORT_EXCEL;
                double temp_pages = (double) all_count / (double) pageSize;
                int pages = (int) Math.ceil(temp_pages);
                int beginIndex = 0;
                int rowNum = 0;
                for (int i = 0; i < pages; i++) {
                    beginIndex = 0 + i * pageSize;
                    log.info("【短信提醒记录导出-分页填充】第" + (i + 1) + "次填充开始====>" + CommUtil.getCurrentTime());

                    list = smsRemindLogsService.getProjectCooperationsForExportExcel(
                    		true_name, log_name, createtime, beginIndex, pageSize);

                    for (Object[] obj : list) {
                    	obj[3] = obj[3].toString().substring(0, 19);
					}
                    
                    rowNum = 2 + i * pageSize;
                    fillSheet(sheet, titleName, titleNames, list, rowNum);
                    log.info("【短信提醒记录导出-分页填充】第" + (i + 1) + "次填充结束====>" + CommUtil.getCurrentTime());
                    list.clear();
                }
                list = null;
            }

            response.setContentType("application/vnd.ms-excel");
            String fileName = "短信提醒记录" + new Date().getTime() + ".xlsx";
            fileName = CommUtil.encodeExportFileName(request, fileName);
            response.setHeader("Content-disposition", "attachment;filename=" + fileName);
            out = response.getOutputStream();
            workbook.write(out);
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void fillSheet(SXSSFSheet sheet, String titleName, String[] titleNames,
                           List<Object[]> list, int rowNum) {
        if (2 == rowNum) {
            POIUtil.setTitle(sheet, titleName, 0, titleNames.length - 1);
            POIUtil.setTitles(sheet, titleNames, 1);
        }
        this.fillData(sheet, list, rowNum);
    }

    private void fillData(SXSSFSheet sheet, List<Object[]> list, int rowNum) {

        if (list != null && list.size() > 0 && rowNum >= 2) {
            CellStyle cellStyle = POIUtil.getBaseCellStyle(sheet);
            Font font = POIUtil.getBaseFont(sheet);
            cellStyle.setFont(font);

            for (Object[] objs : list) {
                Cell cell = null;
                Row row = sheet.createRow(rowNum);
                int columnNum = 0;
                // 序号
                cell = row.createCell(columnNum++);
                cell.setCellValue(new XSSFRichTextString(rowNum - 1 + ""));
                cell.setCellStyle(cellStyle);
                for (int index = 0; index < objs.length; index++) {
                    cell = row.createCell(columnNum++);
                    cell.setCellStyle(cellStyle);
                        cell.setCellValue(new XSSFRichTextString(CommUtil.null2String(objs[index])));
                }
                if (rowNum % 100 == 0) {
                    try {
                        sheet.flushRows();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                rowNum++;
            }
        }
    }


    //=============================================导出Excel区域结束======================================================//
    
    
    
}
