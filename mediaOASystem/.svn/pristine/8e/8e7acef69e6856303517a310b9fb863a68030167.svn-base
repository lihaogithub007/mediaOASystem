package com.yuyu.soft.admin.controller;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.yuyu.soft.base.annotation.SecurityMapping;
import com.yuyu.soft.base.controller.BaseController;
import com.yuyu.soft.base.mv.JModelAndView;
import com.yuyu.soft.entity.Attachments;
import com.yuyu.soft.entity.WorkloadStatistics;
import com.yuyu.soft.service.IAttachmentsService;
import com.yuyu.soft.service.IWorkloadStatisticsService;
import com.yuyu.soft.util.CommUtil;
import com.yuyu.soft.util.Constants;
import com.yuyu.soft.util.JsonUtil;
import com.yuyu.soft.util.POIUtil;
import com.yuyu.soft.util.PageUtil;
import com.yuyu.soft.util.PagerInfo;
import com.yuyu.soft.util.ResultMsg;

/**
 * 工作量统计
 *                       
 * @Filename: WorkloadStatisticsController.java
 * @Version: 1.0
 * @Author: 李明
 * @Email: limn_xmj@163.com
 *
 */
@Controller
public class WorkloadStatisticsController {
    protected Logger                   log = LoggerFactory
                                               .getLogger(WorkloadStatisticsController.class);
    @Resource
    private IWorkloadStatisticsService workloadStatisticsService;
    @Resource
    private IAttachmentsService        attachmentsService;

    @SecurityMapping(res_name = "工作量统计列表", res_url = "/admin/statistics/workload_statistics_list.htm*", res_group = "工作量统计")
    @RequestMapping({ "/admin/statistics/workload_statistics_list.htm" })
    public ModelAndView workload_statistics_list(HttpServletRequest request,
                                                 HttpServletResponse response, String pageSize,
                                                 String currentPage, String name, String beginTime,
                                                 String endTime) {
        ModelAndView mv = new JModelAndView("admin/statistics/workload_statistics_list.html",
            request, response);

        //如果开始时间和结束时间为空，初始化为当月第一天和最后一天
        if (CommUtil.isBlank(beginTime) && CommUtil.isBlank(endTime)) {
            beginTime = CommUtil.getFirstDayOfMonth();
            endTime = CommUtil.getLastDayOfMonth();
        }
        currentPage = PageUtil.initCurrentPage(currentPage);
        PagerInfo pager = PageUtil.initPagerInfo(pageSize, currentPage);

        List<Map<String, Object>> list = queryWorkloadStatisticsMap(name, beginTime, endTime, pager);
        PageUtil.savePageInfo2ModelAndView(mv, list, pager);
        mv.addObject("name", name);
        mv.addObject("beginTime", beginTime);
        mv.addObject("endTime", endTime);
        return mv;
    }

    private List<Map<String, Object>> queryWorkloadStatisticsMap(String name, String beginTime,
                                                                 String endTime, PagerInfo pager) {
        Map<String, Object> paramsMap = new HashMap<String, Object>();

        StringBuilder sql = new StringBuilder();
        sql.append("from (");
        sql.append(" select name");
        sql.append(" ,sum(t.bright_spot) as bright_spot");
        sql.append(" ,sum(t.app_write) as app_write");
        sql.append(" ,sum(t.app_send) as app_send");
        sql.append(" ,sum(t.fb_write) as fb_write");
        sql.append(" ,sum(t.fb_send) as fb_send");
        sql.append(" ,sum(t.weibo_write) as weibo_write");
        sql.append(" ,sum(t.weibo_send) as weibo_send");
        sql.append(" ,sum(t.twt_write) as twt_write");
        sql.append(" ,sum(t.twt_send) as twt_send");
        sql.append(" ,sum(t.upload_yt_or_tencent) as upload_yt_or_tencent");
        sql.append(" ,sum(t.tumblr_send) as tumblr_send");
        sql.append(" ,sum(t.WeChat) as WeChat");
        sql.append(" ,sum(t.inst) as inst");
        sql.append(" ,sum(t.google) as google");
        sql.append(" ,sum(t.pinterest) as pinterest");
        sql.append(" ,sum(t.total) as total");
        sql.append(" from tb_workload_statistics t where t.disabled = false");
        if (CommUtil.isNotNull(name)) {
            sql.append(" and t.name like '%").append(name.trim()).append("%'");
        }
        if (CommUtil.isNotNull(beginTime)) {
            sql.append(" and date_format(t.log_date,'%Y-%m-%d') >= str_to_date('")
                .append(beginTime).append("','%Y-%m-%d')");
        }
        if (CommUtil.isNotNull(endTime)) {
            sql.append(" and date_format(t.log_date,'%Y-%m-%d') <= str_to_date('").append(endTime)
                .append("','%Y-%m-%d')");
        }
        sql.append(" group by t.name");
        sql.append(" order by t.createtime desc");
        sql.append(" ) t");

        List<Map<String, Object>> list = workloadStatisticsService.queryWorkloadStatisticsMap(
            sql.toString(), paramsMap, pager);
        return list;
    }

    //=============================================导出Excel区域开始======================================================//

    @SecurityMapping(res_name = "导出Excel", res_url = "/admin/statistics/workload_statistics_exportExcel.htm*", res_group = "工作量统计")
    @RequestMapping("/admin/statistics/workload_statistics_exportExcel.htm")
    public synchronized void workload_statistics_exportExcel(HttpServletRequest request,
                                                             HttpServletResponse response,
                                                             String currentPage, String name,
                                                             String beginTime, String endTime) {

        List<Object[]> list = null;
        OutputStream out = null;
        SXSSFWorkbook workbook = null;
        SXSSFSheet sheet = null;

        try {
            workbook = new SXSSFWorkbook(100);
            sheet = (SXSSFSheet) workbook.createSheet("工作量统计");

            String titleName = "工作量统计情况";
            String[] titleNames = { "序号", "姓名", "亮点", "APP写", "APP发", "FB写", "FB发", "微博写", "微博发",
                    "TWT写", "TWT发", "上传YT+腾讯", "tumblr发", "微信", "inst", "Google+", "pinterest",
                    "小结" };
            POIUtil.setColumnWidth(sheet, titleNames.length, (byte) 6);
            sheet.setColumnWidth(1, 10 * 512);

            int all_count = workloadStatisticsService.getCountForExportExcel(name, beginTime,
                endTime);

            if (all_count == 0) {
                fillSheet(sheet, titleName, titleNames, null, 2);
            } else {
                //计算分页数
                log.info("总大小：" + all_count);
                int pageSize = Constants.DEFAULT_PAGE_SIZE_FOR_EXPORT_EXCEL;
                double temp_pages = (double) all_count / (double) pageSize;
                int pages = (int) Math.ceil(temp_pages);
                int beginIndex = 0;
                int rowNum = 0;
                for (int i = 0; i < pages; i++) {
                    beginIndex = 0 + i * pageSize;
                    log.info("【工作量统计导出-分页填充】第" + (i + 1) + "次填充开始====>" + CommUtil.getCurrentTime());

                    list = workloadStatisticsService.getWorkloadStatisticsForExportExcel(name,
                        beginTime, endTime, beginIndex, pageSize);

                    rowNum = 2 + i * pageSize;
                    fillSheet(sheet, titleName, titleNames, list, rowNum);
                    log.info("【工作量统计导出-分页填充】第" + (i + 1) + "次填充结束====>" + CommUtil.getCurrentTime());
                    list.clear();
                }
                list = null;
            }

            response.setContentType("application/vnd.ms-excel");
            String fileName = "工作量统计" + new Date().getTime() + ".xlsx";
            fileName = CommUtil.encodeExportFileName(request, fileName);
            response.setHeader("Content-disposition", "attachment;filename=" + fileName);
            out = response.getOutputStream();
            workbook.write(out);
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void fillSheet(SXSSFSheet sheet, String titleName, String[] titleNames,
                           List<Object[]> list, int rowNum) {
        if (2 == rowNum) {
            POIUtil.setTitle(sheet, titleName, 0, titleNames.length - 1);
            POIUtil.setTitles(sheet, titleNames, 1);
        }
        this.fillData(sheet, list, rowNum);
    }

    private void fillData(SXSSFSheet sheet, List<Object[]> list, int rowNum) {

        if (list != null && list.size() > 0 && rowNum >= 2) {
            CellStyle cellStyle = POIUtil.getBaseCellStyle(sheet);
            Font font = POIUtil.getBaseFont(sheet);
            cellStyle.setFont(font);

            for (Object[] objs : list) {
                Cell cell = null;
                Row row = sheet.createRow(rowNum);
                int columnNum = 0;
                // 序号
                cell = row.createCell(columnNum++);
                cell.setCellValue(new XSSFRichTextString(rowNum - 1 + ""));
                cell.setCellStyle(cellStyle);
                for (int index = 0; index < objs.length; index++) {
                    cell = row.createCell(columnNum++);
                    cell.setCellStyle(cellStyle);
                    cell.setCellValue(new XSSFRichTextString(CommUtil.null2String(objs[index])));
                }
                if (rowNum % 100 == 0) {
                    try {
                        sheet.flushRows();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                rowNum++;
            }
        }
    }

    //=============================================导出Excel区域结束======================================================//

    @SecurityMapping(res_name = "导入", res_url = "/admin/statistics/workload_statistics_import.htm*", res_group = "工作量统计")
    @RequestMapping({ "/admin/statistics/workload_statistics_import.htm" })
    public ModelAndView workload_statistics_import(HttpServletRequest request,
                                                   HttpServletResponse response) {

        ModelAndView mv = new JModelAndView("admin/statistics/workload_statistics_import.html",
            request, response);
        return mv;
    }

    @RequestMapping({ "/admin/statistics/workload_statistics_import_save.htm" })
    public void workload_statistics_import_save(HttpServletRequest request,
                                                HttpServletResponse response, String pageSize,
                                                String currentPage, String log_date) {

        ResultMsg rmg = CommUtil.setResultMsgData(null, true, "导入数据保存成功");
        try {
            List<Attachments> list = BaseController.uploadify(request, response,
                "workload_statistics", attachmentsService);
            if (list == null || list.size() == 0) {
                CommUtil.setResultMsgData(rmg, false, "文件保存失败");
            } else {
                Attachments attach = list.get(0);
                String filePath = request.getServletContext().getRealPath("/")
                                  + attach.getSave_path() + "/" + attach.getSave_file_name();

                rmg = workloadStatisticsService.workload_statistics_import_save(filePath, log_date);
            }
        } catch (IOException e) {
            CommUtil.setResultMsgData(rmg, false, "导入数据保存失败");
        }
        rmg.setData(CommUtil.getURL(request) + "/admin/statistics/workload_statistics_list.htm");
        JsonUtil.writeMsg(response, JsonUtil.write2JsonStr(rmg));
    }

    @SecurityMapping(res_name = "打印", res_url = "/admin/statistics/workload_statistics_print.htm*", res_group = "工作量统计")
    @RequestMapping({ "/admin/statistics/workload_statistics_print.htm" })
    public ModelAndView workload_statistics_print(HttpServletRequest request,
                                                  HttpServletResponse response, String name,
                                                  String beginTime, String endTime) {

        List<Map<String, Object>> list = queryWorkloadStatisticsMap(name, beginTime, endTime, null);
        ModelAndView mv = new JModelAndView("admin/statistics/workload_statistics_print.html",
            request, response);
        mv.addObject("objs", list);
        mv.addObject("name", name);
        mv.addObject("beginTime", beginTime);
        mv.addObject("endTime", endTime);
        return mv;
    }

    @SecurityMapping(res_name = "删除", res_url = "/admin/statistics/workload_statistics_delete.htm*", res_group = "工作量统计")
    @RequestMapping({ "/admin/statistics/workload_statistics_delete.htm" })
    public ModelAndView workload_statistics_delete(HttpServletRequest request,
                                                   HttpServletResponse response, String name,
                                                   String beginTime, String endTime,
                                                   String currentPage) {
        String target_url = CommUtil.getURL(request)
                            + "/admin/statistics/workload_statistics_list.htm?currentPage="
                            + currentPage;
        if (CommUtil.isBlank(name)) {
            return CommUtil.errorPage(target_url, "姓名为空", request, response);
        }
        try {
            StringBuilder hql = new StringBuilder();
            hql.append("from WorkloadStatistics t where t.disabled=false");
            hql.append(" and t.name = '").append(name.trim()).append("'");
            if (CommUtil.isNotNull(beginTime)) {
                hql.append(" and date_format(t.log_date,'%Y-%m-%d') >= str_to_date('")
                    .append(beginTime).append("','%Y-%m-%d')");
            }
            if (CommUtil.isNotNull(endTime)) {
                hql.append(" and date_format(t.log_date,'%Y-%m-%d') <= str_to_date('")
                    .append(endTime).append("','%Y-%m-%d')");
            }
            List<WorkloadStatistics> list = workloadStatisticsService.queryWorkloadStatistics(
                hql.toString(), null, null);
            if (list != null && list.size() > 0) {
                workloadStatisticsService.batchDelWorkloadStatistics(list);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return CommUtil.errorPage(target_url, "工作量删除失败", request, response);
        }
        return CommUtil.successPage(target_url, "工作量删除成功", request, response);
    }
}
