package com.yuyu.soft.admin.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.yuyu.soft.base.annotation.SecurityMapping;
import com.yuyu.soft.base.mv.JModelAndView;
import com.yuyu.soft.entity.ForeignExpert;
import com.yuyu.soft.service.IDutyService;
import com.yuyu.soft.service.IForeignExpertService;
import com.yuyu.soft.service.IUserService;
import com.yuyu.soft.util.CommUtil;
import com.yuyu.soft.util.Constants;
import com.yuyu.soft.util.JsonUtil;
import com.yuyu.soft.util.PageUtil;
import com.yuyu.soft.util.PagerInfo;
import com.yuyu.soft.util.ResultMsg;
import com.yuyu.soft.util.WebForm;

@Controller
public class ForeignExpertController {
    protected static final Log    log = LogFactory.getLog(ForeignExpertController.class);
    @Resource
    private IUserService          userService;
    @Resource
    private IDutyService          dutyService;
    @Resource
    private IForeignExpertService foreignExpertService;

    @SecurityMapping(res_name = "外籍专家信息名录列表", res_url = "/admin/user/foreign_expert_list.htm*", res_group = "外籍专家信息名录")
    @RequestMapping({ "/admin/user/foreign_expert_list.htm" })
    public ModelAndView foreign_expert_list(HttpServletRequest request,
                                            HttpServletResponse response, String pageSize,
                                            String currentPage, String chinese_name,
                                            String english_name, String nationality,
                                            String card_number, String mobile) {
        ModelAndView mv = new JModelAndView("admin/user/foreign_expert_list.html", request,
            response);

        currentPage = PageUtil.initCurrentPage(currentPage);
        PagerInfo pager = PageUtil.initPagerInfo(pageSize, currentPage);
        Map<String, Object> paramsMap = new HashMap<String, Object>();

        StringBuilder hql = new StringBuilder();
        hql.append("from ForeignExpert t where t.disabled=false");
        if (CommUtil.isNotNull(chinese_name)) {
            hql.append(" and t.chinese_name like :chinese_name");
            paramsMap.put("chinese_name", "%" + chinese_name.trim() + "%");
        }
        if (CommUtil.isNotNull(english_name)) {
            hql.append(" and t.english_name like :english_name");
            paramsMap.put("english_name", "%" + english_name.trim() + "%");
        }
        if (CommUtil.isNotNull(nationality)) {
            hql.append(" and t.nationality like :nationality");
            paramsMap.put("nationality", "%" + nationality.trim() + "%");
        }
        if (CommUtil.isNotNull(card_number)) {
            hql.append(" and t.card_number like :card_number");
            paramsMap.put("card_number", "%" + card_number.trim() + "%");
        }
        if (CommUtil.isNotNull(mobile)) {
            hql.append(" and t.mobile like :mobile");
            paramsMap.put("mobile", "%" + mobile.trim() + "%");
        }
        hql.append(" order by t.createtime desc");
        List<ForeignExpert> list = foreignExpertService.queryForeignExpert(hql.toString(),
            paramsMap, pager);
        PageUtil.savePageInfo2ModelAndView(mv, list, pager);

        mv.addObject("chinese_name", chinese_name);
        mv.addObject("english_name", english_name);
        mv.addObject("nationality", nationality);
        mv.addObject("card_number", card_number);
        mv.addObject("mobile", mobile);
        mv.addObject("dutys", dutyService.queryAllDuty());
        mv.addObject("sex_map", Constants.SEX_MAP);//性别
        return mv;
    }

    @SecurityMapping(res_name = "查看", res_url = "/admin/user/foreign_expert_view.htm*", res_group = "外籍专家信息名录")
    @RequestMapping({ "/admin/user/foreign_expert_view.htm" })
    public ModelAndView foreign_expert_view(HttpServletRequest request,
                                            HttpServletResponse response, String currentPage,
                                            Long id) {

        String target_url = CommUtil.getURL(request)
                            + "/admin/user/foreign_expert_list.htm?currentPage=" + currentPage;
        if (id == null) {
            return CommUtil.errorPage(target_url, "外籍专家信息名录标识为空", request, response);
        }
        ForeignExpert foreignExpert = foreignExpertService.getForeignExpert(id);
        if (foreignExpert == null) {
            return CommUtil.errorPage(target_url, "找不到外籍专家信息名录记录", request, response);
        }
        ModelAndView mv = new JModelAndView("admin/user/foreign_expert_view.html", request,
            response);

        mv.addObject("obj", foreignExpert);
        mv.addObject("currentPage", currentPage);
        mv.addObject("dutys", dutyService.queryAllDuty());
        mv.addObject("sex_map", Constants.SEX_MAP);//性别
        return mv;
    }

    @SecurityMapping(res_name = "添加", res_url = "/admin/user/foreign_expert_add.htm*", res_group = "外籍专家信息名录")
    @RequestMapping({ "/admin/user/foreign_expert_add.htm" })
    public ModelAndView foreign_expert_add(HttpServletRequest request,
                                           HttpServletResponse response, String pageSize,
                                           String currentPage) {
        ModelAndView mv = new JModelAndView("admin/user/foreign_expert_add.html", request, response);
        mv.addObject("currentPage", currentPage);
        mv.addObject("dutys", dutyService.queryAllDuty());
        mv.addObject("sex_map", Constants.SEX_MAP);//性别
        return mv;
    }

    @RequestMapping({ "/admin/user/foreign_expert_add_save.htm" })
    public void foreign_expert_add_save(HttpServletRequest request, HttpServletResponse response,
                                        String currentPage, Long duty_id) {

        ResultMsg rmg = CommUtil.setResultMsgData(null, true, "外籍专家信息名录保存成功");
        WebForm wf = new WebForm();
        ForeignExpert foreignExpert = (ForeignExpert) wf.toPo(request, ForeignExpert.class);
        try {
            rmg = foreignExpertService.add_save(foreignExpert, duty_id);
        } catch (Exception e) {
            e.printStackTrace();
            CommUtil.setResultMsgData(rmg, false, "外籍专家信息名录保存失败");
        }
        rmg.setData(CommUtil.getURL(request) + "/admin/user/foreign_expert_list.htm?currentPage="
                    + currentPage);
        JsonUtil.writeMsg(response, JsonUtil.write2JsonStr(rmg));
    }

    @SecurityMapping(res_name = "编辑", res_url = "/admin/user/foreign_expert_edit.htm*", res_group = "外籍专家信息名录")
    @RequestMapping({ "/admin/user/foreign_expert_edit.htm" })
    public ModelAndView foreign_expert_edit(HttpServletRequest request,
                                            HttpServletResponse response, String pageSize,
                                            String currentPage, Long id) {

        String target_url = CommUtil.getURL(request)
                            + "/admin/user/foreign_expert_list.htm?currentPage=" + currentPage;
        if (id == null) {
            return CommUtil.errorPage(target_url, "外籍专家信息名录标识为空", request, response);
        }
        ForeignExpert foreignExpert = foreignExpertService.getForeignExpert(id);
        if (foreignExpert == null) {
            return CommUtil.errorPage(target_url, "找不到外籍专家信息名录记录", request, response);
        }
        ModelAndView mv = new JModelAndView("admin/user/foreign_expert_edit.html", request,
            response);
        mv.addObject("obj", foreignExpert);
        mv.addObject("currentPage", currentPage);
        mv.addObject("dutys", dutyService.queryAllDuty());
        mv.addObject("sex_map", Constants.SEX_MAP);//性别
        return mv;
    }

    @RequestMapping({ "/admin/user/foreign_expert_edit_save.htm" })
    public void foreign_expert_edit_save(HttpServletRequest request, HttpServletResponse response,
                                         Long id, String currentPage, Long duty_id) {

        ResultMsg rmg = CommUtil.setResultMsgData(null, true, "外籍专家信息名录编辑保存成功");
        if (id == null) {
            CommUtil.setResultMsgData(rmg, false, "外籍专家信息名录标识为空");
        }
        if (rmg.getResult()) {
            ForeignExpert dbFE = foreignExpertService.getForeignExpert(id);
            if (dbFE == null) {
                CommUtil.setResultMsgData(rmg, false, "找不到外籍专家信息名录记录");
            } else {
                WebForm wf = new WebForm();
                ForeignExpert foreignExpert = (ForeignExpert) wf.toPo(request, dbFE);
                try {
                    rmg = foreignExpertService.edit_save(foreignExpert, duty_id);
                } catch (Exception e) {
                    CommUtil.setResultMsgData(rmg, false, "外籍专家信息名录编辑保存失败");
                }
            }
        }
        rmg.setData(CommUtil.getURL(request) + "/admin/user/foreign_expert_list.htm?currentPage="
                    + currentPage);
        JsonUtil.writeMsg(response, JsonUtil.write2JsonStr(rmg));
    }

    @SecurityMapping(res_name = "删除", res_url = "/admin/user/foreign_expert_delete.htm*", res_group = "外籍专家信息名录")
    @RequestMapping({ "/admin/user/foreign_expert_delete.htm" })
    public ModelAndView foreign_expert_delete(HttpServletRequest request,
                                              HttpServletResponse response, Long id,
                                              String currentPage) {
        String target_url = CommUtil.getURL(request)
                            + "/admin/user/foreign_expert_list.htm?currentPage=" + currentPage;
        if (id == null) {
            return CommUtil.errorPage(target_url, "外籍专家信息名录标识为空", request, response);
        }
        ForeignExpert foreignExpert = foreignExpertService.getForeignExpert(id);
        if (foreignExpert == null) {
            return CommUtil.errorPage(target_url, "找不到外籍专家信息名录记录", request, response);
        }
        try {
            foreignExpertService.delForeignExpert(foreignExpert);
        } catch (Exception e) {
            e.printStackTrace();
            return CommUtil.errorPage(target_url, "外籍专家信息名录删除失败", request, response);
        }
        return CommUtil.successPage(target_url, "外籍专家信息名录删除成功", request, response);
    }
}
